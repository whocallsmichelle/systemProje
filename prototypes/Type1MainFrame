//Type1
package view;

import controller.BookController;
import model.Book;
import model.User;
import util.Result;

import javax.swing.*;
import java.awt.*;

public class Type1MainFrame extends JFrame {
    private User loggedInUser;
    private int sessionId; // SESSION ID'Yİ TUTMAK İÇİN ALAN
    private BookController bookController; // Controller nesnesi

    private JTextField bookIdField;
    private JButton displayBookButton;
    private JTextArea bookInfoArea;

    public Type1MainFrame(User user, int sessionId) {
        this.loggedInUser = user;
        this.sessionId = sessionId; // Gelen sessionId'yi sakla
        this.bookController = new BookController();

        setTitle("MyLibrary Yönetim Paneli - Session ID: " + this.sessionId);
        setSize(800, 600);
        setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        setLocationRelativeTo(null);

        JTabbedPane tabbedPane = new JTabbedPane();

        //Arama ve Görüntüleme
        JPanel displayPanel = new JPanel(new BorderLayout());

        JPanel topPanel = new JPanel();
        topPanel.add(new JLabel("Kitap ID:"));
        bookIdField = new JTextField(10);
        topPanel.add(bookIdField);
        displayBookButton = new JButton("Kitap Bilgilerini Getir");
        topPanel.add(displayBookButton);
        
        displayPanel.add(topPanel, BorderLayout.NORTH);

        bookInfoArea = new JTextArea();
        bookInfoArea.setEditable(false);
        displayPanel.add(new JScrollPane(bookInfoArea), BorderLayout.CENTER);

        tabbedPane.addTab("Görüntüleme", displayPanel);

        // Diğer Sekmeler için
        
        add(tabbedPane);

        displayBookButton.addActionListener(e -> {
            displayBookInfo();
        });
    }

    private void displayBookInfo() {
        String bookIdText = bookIdField.getText();
        if (bookIdText.trim().isEmpty()) {
            JOptionPane.showMessageDialog(this, "Lütfen bir Kitap ID girin.", "Uyarı", JOptionPane.WARNING_MESSAGE);
            return;
        }

        setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));

        SwingWorker<Result, Void> worker = new SwingWorker<>() {
            @Override
            protected Result doInBackground() throws Exception {
                // Arka planda çalışacak kod
                int bookId = Integer.parseInt(bookIdText);
                // Controller'ı sessionID ile çağır!
                return bookController.displayBook(sessionId, bookId);
            }

            @Override
            protected void done() {
                // İş bitince GUI'yi güncelle
                try {
                    Result result = get(); // Sonucu al
                    if (result.getStatus().equals("success")) {
                        Book book = (Book) result.getData();
                        // Gelen Book nesnesi ile metin alanını doldur
                        String info = "Kitap Adı: " + book.getTitle() + "\n"
                                    + "Yayın Yılı: " + book.getYear() + "\n"
                                    + "Hakkında: " + book.getAbout();
                        bookInfoArea.setText(info);
                    } else {
                        // Backend'den gelen hata mesajını göster
                        bookInfoArea.setText(""); // Alanı temizle
                        JOptionPane.showMessageDialog(Type1MainFrame.this,
                                result.getMessage(), "Hata", JOptionPane.ERROR_MESSAGE);
                    }
                } catch (Exception ex) {
                    ex.printStackTrace();
                    JOptionPane.showMessageDialog(Type1MainFrame.this,
                            "Bir hata oluştu: " + ex.getMessage(), "İstemci Hatası", JOptionPane.ERROR_MESSAGE);
                } finally {
                    setCursor(Cursor.getDefaultCursor());
                }
            }
        };
        worker.execute();
    }
}
